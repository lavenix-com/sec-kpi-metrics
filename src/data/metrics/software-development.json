[
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Security Defects per Release",
    "MetricDescription": "Number of security-related defects identified post-release\nCalculation: Total count of security defects identified after software release.",
    "ReportPeriod": "Per Release",
    "Target": "0",
    "Comment": "Reducing security defects in releases improves overall software security and reliability.",
    "Contributor": "-",
    "Source": "OWASP Top Ten"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Open Source Component Risk",
    "MetricDescription": "Percentage of high-risk open source components used in the software\nCalculation: (Number of high-risk components / Total number of components) * 100.",
    "ReportPeriod": "Quarterly",
    "Target": "0%",
    "Comment": "Managing the risk associated with open source components is vital for maintaining software security.",
    "Contributor": "-",
    "Source": "OWASP Dependency-Check"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Security Requirements Coverage",
    "MetricDescription": "Percentage of security requirements addressed in the development process\nCalculation: (Number of security requirements addressed / Total number of security requirements) * 100.",
    "ReportPeriod": "Quarterly",
    "Target": "100%",
    "Comment": "Ensuring all security requirements are addressed helps in building secure software.",
    "Contributor": "-",
    "Source": "NIST SP 800-160: Systems Security Engineering"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Static Analysis Issues",
    "MetricDescription": "Number of security issues identified through static code analysis\nCalculation: Total count of issues identified.",
    "ReportPeriod": "Per Release",
    "Target": "Reduction by 10% each release",
    "Comment": "Static analysis helps in early detection of potential security issues in the code.",
    "Contributor": "-",
    "Source": "ISO/IEC 27034: Application security"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Dynamic Analysis Issues",
    "MetricDescription": "Number of security issues identified through dynamic application security testing (DAST)\nCalculation: Total count of issues identified.",
    "ReportPeriod": "Per Release",
    "Target": "Reduction by 10% each release",
    "Comment": "Dynamic analysis helps in identifying security issues in the runtime environment.",
    "Contributor": "-",
    "Source": "OWASP Application Security Verification Standard (ASVS)"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Threat Modeling Coverage",
    "MetricDescription": "Percentage of projects that include threat modeling in their development lifecycle\nCalculation: (Number of projects with threat modeling / Total number of projects) * 100.",
    "ReportPeriod": "Annual",
    "Target": "100%",
    "Comment": "Incorporating threat modeling helps in identifying and mitigating potential security threats early in the development process.",
    "Contributor": "-",
    "Source": "OWASP Threat Modeling"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Vulnerability Density",
    "MetricDescription": "Number of vulnerabilities per 1,000 lines of code (KLOC)\nCalculation: (Total number of vulnerabilities / Total lines of code) * 1,000.",
    "ReportPeriod": "Quarterly",
    "Target": "Less than 1 vulnerability per KLOC",
    "Comment": "Monitoring vulnerability density helps in assessing the security quality of the codebase.",
    "Contributor": "-",
    "Source": "OWASP Software Assurance Maturity Model (SAMM)"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Patch Deployment Time",
    "MetricDescription": "Average time taken to deploy security patches after a vulnerability is discovered\nCalculation: Total time taken to deploy patches divided by the number of patches.",
    "ReportPeriod": "Monthly",
    "Target": "Within 14 days",
    "Comment": "Timely patch deployment is critical to mitigate risks from known vulnerabilities.",
    "Contributor": "-",
    "Source": "ISO/IEC 30111: Vulnerability handling processes"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Code Review Coverage",
    "MetricDescription": "Percentage of code reviewed for security vulnerabilities before deployment\nCalculation: (Lines of code reviewed / Total lines of code) * 100.",
    "ReportPeriod": "Monthly",
    "Target": "100%",
    "Comment": "Comprehensive code reviews are essential for identifying and mitigating security issues early.",
    "Contributor": "-",
    "Source": "CWE/SANS Top 25 Most Dangerous Software Errors"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Automated Testing Coverage",
    "MetricDescription": "Percentage of code covered by automated security tests\nCalculation: (Lines of code covered by automated tests / Total lines of code) * 100.",
    "ReportPeriod": "Quarterly",
    "Target": "85% or higher",
    "Comment": "High automated testing coverage helps in early detection of security vulnerabilities.",
    "Contributor": "-",
    "Source": "ISO/IEC 27034: Application security"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Security Training Completion Rate",
    "MetricDescription": "Percentage of development team members who have completed security training\nCalculation: (Number of trained team members / Total number of team members) * 100.",
    "ReportPeriod": "Annual",
    "Target": "100%",
    "Comment": "Ensuring all developers are trained in security best practices is crucial for reducing vulnerabilities.",
    "Contributor": "-",
    "Source": "ENISA: Secure Software Development Lifecycle"
  },
  {
    "Category": "Software Development",
    "SubCategory": "Implementation/ Assessment ",
    "MetricTitle": "Vulnerable Modules",
    "MetricDescription": "% failed security control requirements",
    "ReportPeriod": "Organization-defined",
    "Target": "X or lower, \nX % lower than previous period, \nX % reduction over a defined period \n\nLower is better",
    "Comment": null,
    "Contributor": "-",
    "Source": "NIST: SP 800-55 Revision 1, Performance Measurement Guide for Information Security"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Vulnerability Density",
    "MetricDescription": "Number of vulnerabilities per 1,000 lines of code (KLOC)\nCalculation: (Total number of vulnerabilities / Total lines of code) * 1,000.",
    "ReportPeriod": "Quarterly",
    "Target": "Less than 1 vulnerability per KLOC",
    "Comment": "Monitoring vulnerability density helps in assessing the security quality of the codebase.",
    "Contributor": "-",
    "Source": "OWASP Software Assurance Maturity Model (SAMM)"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Patch Deployment Time",
    "MetricDescription": "Average time taken to deploy security patches after a vulnerability is discovered\nCalculation: Total time taken to deploy patches divided by the number of patches.",
    "ReportPeriod": "Monthly",
    "Target": "Within 14 days",
    "Comment": "Timely patch deployment is critical to mitigate risks from known vulnerabilities.",
    "Contributor": "-",
    "Source": "ISO/IEC 30111: Vulnerability handling processes"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Code Review Coverage",
    "MetricDescription": "Percentage of code reviewed for security vulnerabilities before deployment\nCalculation: (Lines of code reviewed / Total lines of code) * 100.",
    "ReportPeriod": "Monthly",
    "Target": "100%",
    "Comment": "Comprehensive code reviews are essential for identifying and mitigating security issues early.",
    "Contributor": "-",
    "Source": "CWE/SANS Top 25 Most Dangerous Software Errors"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Automated Testing Coverage",
    "MetricDescription": "Percentage of code covered by automated security tests\nCalculation: (Lines of code covered by automated tests / Total lines of code) * 100.",
    "ReportPeriod": "Quarterly",
    "Target": "85% or higher",
    "Comment": "High automated testing coverage helps in early detection of security vulnerabilities.",
    "Contributor": "-",
    "Source": "ISO/IEC 27034: Application security"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Security Training Completion Rate",
    "MetricDescription": "Percentage of development team members who have completed security training\nCalculation: (Number of trained team members / Total number of team members) * 100.",
    "ReportPeriod": "Annual",
    "Target": "100%",
    "Comment": "Ensuring all developers are trained in security best practices is crucial for reducing vulnerabilities.",
    "Contributor": "-",
    "Source": "ENISA: Secure Software Development Lifecycle"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Security Defects per Release",
    "MetricDescription": "Number of security-related defects identified post-release\nCalculation: Total count of security defects identified after software release.",
    "ReportPeriod": "Per Release",
    "Target": "0",
    "Comment": "Reducing security defects in releases improves overall software security and reliability.",
    "Contributor": "-",
    "Source": "OWASP Top Ten"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Open Source Component Risk",
    "MetricDescription": "Percentage of high-risk open source components used in the software\nCalculation: (Number of high-risk components / Total number of components) * 100.",
    "ReportPeriod": "Quarterly",
    "Target": "0%",
    "Comment": "Managing the risk associated with open source components is vital for maintaining software security.",
    "Contributor": "-",
    "Source": "OWASP Dependency-Check"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Security Requirements Coverage",
    "MetricDescription": "Percentage of security requirements addressed in the development process\nCalculation: (Number of security requirements addressed / Total number of security requirements) * 100.",
    "ReportPeriod": "Quarterly",
    "Target": "100%",
    "Comment": "Ensuring all security requirements are addressed helps in building secure software.",
    "Contributor": "-",
    "Source": "NIST SP 800-160: Systems Security Engineering"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Static Analysis Issues",
    "MetricDescription": "Number of security issues identified through static code analysis\nCalculation: Total count of issues identified.",
    "ReportPeriod": "Per Release",
    "Target": "Reduction by 10% each release",
    "Comment": "Static analysis helps in early detection of potential security issues in the code.",
    "Contributor": "-",
    "Source": "ISO/IEC 27034: Application security"
  },
  {
    "Category": "Software Development",
    "SubCategory": null,
    "MetricTitle": "Dynamic Analysis Issues",
    "MetricDescription": "Number of security issues identified through dynamic application security testing (DAST)\nCalculation: Total count of issues identified.",
    "ReportPeriod": "Per Release",
    "Target": "Reduction by 10% each release",
    "Comment": "Dynamic analysis helps in identifying security issues in the runtime environment.",
    "Contributor": "-",
    "Source": "OWASP Application Security Verification Standard (ASVS)"
  }
]